//
//	Филимонов И.В.
//		+7 913 240 81 77
//		+7 905 084 20 06 (Telegram)
//		https://github.com/Shu-ler
//		

//@skip-check module-region-empty
#Область ПрограммныйИнтерфейс

// Находит элемент справочника по коду и наименованию.
// 
// Если отсутствует элемент справочника с заданным кодом и ИзменятьЭлемент = Истина - создает новый элемент
// Если наименование не соответствует заданному и ИзменятьЭлемент = Истина - производит переименование элемента
// 
// В случае неудачного поиска, создания или переименования элемента возвращает Неопределено
// 
// Параметры:
//  СправочникМенеджер - СправочникМенеджер - Справочник менеджер
//  Аргументы - Структура - Данные заполнения:
// * Код - Строка
// * Наименование - Строка 
//  ИзменятьЭлемент - Булево - Изменять элемент
//  Счетчик - Неопределено - Счетчик измененных
// 
// Возвращаемое значение:
//  Неопределено, СправочникСсылка - Найденный элемент
Функция НайтиСоздатьПоКодуИНаименованию(СправочникМенеджер, Аргументы, ИзменятьЭлемент, Счетчик = Неопределено) Экспорт

	// Получение пустой ссылки
	ПустаяСсылка = СправочникМенеджер.ПустаяСсылка();
	
	// Проверка типа аргумента на необходимость и возможность инкремента
	СчетчикИспользуется = ТипЗнч(Счетчик) = Тип("Число");

	ИскомаяСсылка = ПустаяСсылка;

	// Поиск элемента
	Элемент = СправочникМенеджер.НайтиПоКоду(Аргументы.Код);

	Если Элемент = ПустаяСсылка Тогда

		// Создание нового элемента справочника
		Элемент = СправочникМенеджер.СоздатьЭлемент();
		Элемент.Заполнить(Аргументы);

		Попытка	
			
			// Запись нового элемента					
			Элемент.Записать();
			ИскомаяСсылка = Элемент.Ссылка;
			
			// Инкремент счетчика измененных элементов
			Если СчетчикИспользуется Тогда
				Счетчик = Счетчик + 1;
			КонецЕсли;

		Исключение					
			
			// Возврат Неопределено
			ИскомаяСсылка = ПустаяСсылка;

			// Запись ошибки в журнал регистрации
			РасшифровкаОшибкиВЖурналРегистрации(Аргументы.ИмяСобытия);

		КонецПопытки;

	Иначе

		Если ЭлементСоответствует(Элемент, Аргументы) Тогда
			
			// Возврат найденной ссылки
			ИскомаяСсылка = Элемент;

		ИначеЕсли ИзменятьЭлемент Тогда 

			// Переименование элемента
			ЭлементОбъект = Элемент.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ЭлементОбъект, Аргументы);

			Попытка
			
				// Запись измененного бъекта
				ЭлементОбъект.Записать();
				ИскомаяСсылка = ЭлементОбъект.Ссылка;
			
				// Инкремент счетчика измененных элементов
				Если СчетчикИспользуется Тогда
					Счетчик = Счетчик + 1;
				КонецЕсли;

			Исключение
				// Возврат Неопределено
				ИскомаяСсылка = ПустаяСсылка;
			
				// Запись ошибки в журнал регистрации
				РасшифровкаОшибкиВЖурналРегистрации(Аргументы.ИмяСобытия);

			КонецПопытки;

		Иначе
			ИскомаяСсылка = ПустаяСсылка;
		КонецЕсли;

	КонецЕсли;

	Возврат ИскомаяСсылка

КонецФункции

Функция ПолучитьДанныеРасширенияКонфигурации(ИмяРасширения) Экспорт

	Результат = ПолучитьДанныеРасширенийКонфигурации(ИмяРасширения);

	Возврат Результат;

КонецФункции

// Перенос дополнительного реквизита на форме в другую группу
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ДополнительныйРеквизит - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - Дополнительный реквизит
//  ЦелеваяГруппа - ГруппаФормы - Целевая группа
//  ТолькоПросмотр - Булево - Только просмотр
Процедура ПереместитьДополнительныйРеквизит(Форма, ДополнительныйРеквизит, ЦелеваяГруппа, ТолькоПросмотр = Ложь) Экспорт

	СписокСвойств = Форма.Свойства_ОписаниеДополнительныхРеквизитов;

	ОписанияДополнительныхРеквизитов = СписокСвойств.НайтиСтроки(Новый Структура("Свойство", ДополнительныйРеквизит));

	Если ОписанияДополнительныхРеквизитов.Количество() > 0 Тогда

		ИскомыйЭлементИмя = ОписанияДополнительныхРеквизитов[0].ИмяРеквизитаЗначение;
		ИскомыйЭлемент = Форма.Элементы[ИскомыйЭлементИмя];
		ИскомыйЭлемент.ТолькоПросмотр = ТолькоПросмотр;
		ИскомыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;

		Форма.Элементы.Переместить(ИскомыйЭлемент, ЦелеваяГруппа);

	КонецЕсли;

КонецПроцедуры

#Область XML

Функция ТекстИзXML(Узел) Экспорт

	Последовательность = Узел.Последовательность();
	ТекстовоеЗначение = Последовательность.ПолучитьТекст(0);

	Возврат ТекстовоеЗначение;

КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

// Заносит описание ошибки в журнал регистрации с уровнем "Ошибка"
// 
// Параметры:
//  ИмяСобытия - Строка - Имя события в журнале регистрации
Процедура РасшифровкаОшибкиВЖурналРегистрации(ИмяСобытия) Экспорт

	Комментарий = ОписаниеОшибки();
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, , , Комментарий);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверка элемента на соответствие по наименованию и родителю
// 
// Параметры:
//  Элемент - СправочникСсылка - Элемент
//  Аргументы - Структура - Аргументы:
// * Наименование - Строка - Наименование
// 
// Возвращаемое значение:
//  Булево - Элемент соответствует
Функция ЭлементСоответствует(Элемент, Аргументы)

	// Константы
	РеквизитНаименование = "Наименование";
		РеквизитРодитель = "Родитель";

	// Инициализация переменных
	Родитель = Неопределено;

	// Проверка на соответствие наименования
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, РеквизитНаименование);
	Результат = (Наименование = Аргументы.Наименование);
	
	// Проверка на соответствие родителя
	Если Результат = Истина И Аргументы.Свойство("Родитель", Родитель) Тогда
		РодительСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, РеквизитРодитель);
		Результат = (РодительСсылка = Родитель);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает данные расширений конфигурации
// 
// Параметры:
//  ИмяРасширения - Строка, Неопределено - Имя искомого расширения. Если не задано - возвращаются данные всех расширений
// 
// Возвращаемое значение:
//  Массив - Получить данные расширений конфигурации
//@skip-check doc-comment-collection-item-type
Функция ПолучитьДанныеРасширенийКонфигурации(ИмяРасширения = Неопределено)

	Если ИмяРасширения <> Неопределено Тогда
		Результат = РасширенияКонфигурации.Получить(Новый Структура("Имя", ИмяРасширения));
	Иначе
		Результат = РасширенияКонфигурации.Получить();
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти