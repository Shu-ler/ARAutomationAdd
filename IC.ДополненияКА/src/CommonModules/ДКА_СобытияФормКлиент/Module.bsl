// @strict-types
#Область ПрограммныйИнтерфейс

// Обработчик одноименного события для общего модуля ПодборТоваровКлиент
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//@skip-check dynamic-access-method-not-found
//@skip-check invocation-parameter-type-intersect
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма) Экспорт

	ИмяРеквизитаРасширенныйПросмотр = "ДКА_РасширенныйПросмотр";
	ИмяПанели = "ДКА_ПанельОстаткиЦены";

	Если Форма[ИмяРеквизитаРасширенныйПросмотр] Тогда
		
		// Разыменования
		ИмяСписка = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
		Номенклатура = Форма.Элементы[ИмяСписка].ТекущаяСтрока;
		
		ИмяТаблицыЦен = "ДКА_Цены";
		ИмяТаблицыОстатки = "ДКА_Остатки";
		ИмяРеквизитаПрименимость = "ДКА_Применимость";
		
		РеквизитТаблицаЦен = Форма[ИмяТаблицыЦен];
		РеквизитТаблицаОстатки = Форма[ИмяТаблицыОстатки];

		// Получение цен
		НаборЦен = ДКА_СобытияФормВызовСервера.ЦеныНоменклатуры(Номенклатура);

		// Перенос цен в реквизит формы ДКА_Цены
		РеквизитТаблицаЦен.Очистить();

		Для Каждого Эл Из НаборЦен Цикл
			ЗаполнитьЗначенияСвойств(РеквизитТаблицаЦен.Добавить(), Эл);
		КонецЦикла;

		// Получение остатков
		НаборОстатков = ДКА_СобытияФормВызовСервера.ОстаткиНоменклатуры(Номенклатура);

		// Перенос цен в реквизит формы ДКА_Цены
		РеквизитТаблицаОстатки.Очистить();

		Для Каждого Эл Из НаборОстатков Цикл
			ЗаполнитьЗначенияСвойств(РеквизитТаблицаОстатки.Добавить(), Эл);
		КонецЦикла;

		// Получение применимости
		Форма[ИмяРеквизитаПрименимость] = ДКА_СобытияФормВызовСервера.Применимость(Номенклатура);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти