// @strict-types

//
//	Филимонов И.В.
//		+7 913 240 81 77
//		+7 905 084 20 06 (Telegram)
//		https://github.com/Shu-ler
//
#Область ПрограммныйИнтерфейс

// Обработчик команды создания нового документа установки цен номенклатуры.
// 
// Параметры:
//  Товары - Массив из СправочникСсылка.Номенклатура - Товары
//  ПараметрыВыполненияКоманды - см. ПодключаемыеКомандыКлиентСервер.ПараметрыВыполненияКоманды
Процедура УстановкаЦенНовыйДокумент(Товары, ПараметрыВыполненияКоманды) Экспорт

	ФормаВладелец = ПараметрыВыполненияКоманды.Форма;

	Параметры = Новый Структура("Товары", Товары);

	ДополнительныеПараметры = Новый Структура("Идентификатор", ПараметрыВыполненияКоманды.ОписаниеКоманды.Идентификатор);
	ДополнительныеПараметры.Вставить("Форма", ФормаВладелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыполненияКомандПанели",
												  ЭтотОбъект,
												  ДополнительныеПараметры);

	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента",
				 Параметры,
				 ФормаВладелец,
				 ФормаВладелец.УникальныйИдентификатор,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

// Обработчик команды открытия последнего документа установки цен номенклатуры
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура
//  ПараметрыВыполненияКоманды - см. ПодключаемыеКомандыКлиентСервер.ПараметрыВыполненияКоманды
Процедура ИзменениеПоследнейУстановкиЦен(Номенклатура, ПараметрыВыполненияКоманды) Экспорт

	ФормаВладелец = ПараметрыВыполненияКоманды.Форма;

	ВидЦены = ТекущийВидЦен(ФормаВладелец);
	ДокументУстановки = ДКА_СобытияФормВызовСервера.ПоследнийДокументУстановкиЦен(Номенклатура, ВидЦены);

	Параметры = Новый Структура("Ключ", ДокументУстановки);

	ДополнительныеПараметры = Новый Структура("Идентификатор", ПараметрыВыполненияКоманды.ОписаниеКоманды.Идентификатор);
	ДополнительныеПараметры.Вставить("Форма", ФормаВладелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыполненияКомандПанели",
												  ЭтотОбъект,
												  ДополнительныеПараметры);

	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента",
				 Параметры,
				 ФормаВладелец,
				 ФормаВладелец.УникальныйИдентификатор,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

// Обработчик команды открытия панели настройки расширенного просмотра номенклатуры
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура
//  ПараметрыВыполненияКоманды - см. ПодключаемыеКомандыКлиентСервер.ПараметрыВыполненияКоманды
Процедура Настройки(Номенклатура, ПараметрыВыполненияКоманды) Экспорт

	ФормаВладелец = ПараметрыВыполненияКоманды.Форма;

	ДополнительныеПараметры = Новый Структура("Форма", ФормаВладелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыполненияКомандПанели",
												  ЭтотОбъект,
												  ДополнительныеПараметры);

	ОткрытьФорму("ОбщаяФорма.ДКА_РасширениеСпискаНоменклатуры",
				 ,
				 ФормаВладелец,
				 ФормаВладелец.УникальныйИдентификатор,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

// Обработка завершения выполнения команд панели расширенного просмотра номенклатуры
// 
// Параметры:
//  Результат - Структура:
// 		* ВидыЦен - СписокЗначений из СправочникСсылка.ВидыЦен - Новый список выбранных видов цен
// 		* ПоказатьКартинку - Булево
// 		* ПоказатьПрименимость - Булево
// 		* ПоказатьЗапасы - Булево
//  ДополнительныеПараметры - Структура:
//	* Форма - ФормаКлиентскогоПриложения - Форма списка номенклатуры
Процедура ЗавершениеВыполненияКомандПанели(Результат, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;

	Если ТипЗнч(Результат) = Тип("Структура") Тогда

		// Получение имен для формы
		Имена = ДКА_ФормыОбъектовКлиентСервер.КонстантыФормыСпискаНоменклатуры();

		// Разыменование
		Элементы = Форма.Элементы;
		РеквизитВыбранныеВидыЦен = ДКА_СтдФормыКлиентСервер.РеквизитСписокЗначений(Форма, Имена.РеквизитВыбранныеВидыЦен);
		
		// Установка видимости элементов
		Элементы[Имена.РеквизитАдресКартинки].Видимость = Результат.ПоказатьКартинку;
		Элементы[Имена.РеквизитПрименимость].Видимость = Результат.ПоказатьПрименимость;
		Элементы[Имена.РеквизитСписокЗапасы].Видимость = Результат.ПоказатьЗапасы;

		РеквизитВыбранныеВидыЦен.Очистить();

		Для Каждого Эл Из Результат.ВидыЦен Цикл
			//@skip-check typed-value-adding-to-untyped-collection
			РеквизитВыбранныеВидыЦен.Добавить(Эл.Значение);
		КонецЦикла;

		ДКА_СобытияФормКлиент.УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);

	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда

	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Идентификатор") Тогда

		ДКА_СобытияФормКлиент.УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает текущий вид цены
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыЦен - Текущий вид цены
Функция ТекущийВидЦен(Форма)

	ПолеВидЦены = "ВидЦены";
	//@skip-check variable-value-type
	ВидЦены = Форма.Элементы["ДКА_Цены"].ТекущиеДанные[ПолеВидЦены];
	
	Возврат ВидЦены;
	
КонецФункции

#КонецОбласти